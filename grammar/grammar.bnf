{
  parserClass="org.jetbrains.agda.gen.parser.AgdaParser"
  stubParserClass="org.jetbrains.agda.parser.AgdaParserUtil"
  elementTypeHolderClass="org.jetbrains.agda.gen.parser.AgdaTokenTypes"
  tokenTypeClass="org.jetbrains.agda.parser.AgdaToken"
  elementTypeClass="org.jetbrains.agda.parser.AgdaCompositeElementType"

  tokens = [
    LET_KEYWORD="let"
    IN_KEYWORD="in"
    DATA_KEYWORD="data"
    WHERE_KEYWORD="where"
    MODULE_KEYWORD="module"
    RECORD_KEYWORD="record"
    POSTULATE_KEYWORD="postulate"
    INFIX_KEYWORD="infix"
    INFIXL_KEYWORD="infixl"
    INFIXR_KEYWORD="infixr"
    FORALL="forall"
    OPEN_KEYWORD="open"
    IMPORT_KEYWORD="import"
    CONSTRUCTOR_KEYWORD="constructor"
    FIELD_KEYWORD="field"
    PUBLIC_KEYWORD="public"
    USING_KEYWORD="using"
    HIDING_KEYWORD="hiding"
    MUTUAL_KEYWORD="mutual"

    NUMBER="number"
    STRING="STRING"
    COMMENT="COMMENT"
    END_OF_LINE_COMMENT="--"
    DOT="."
    COLON=":"
    ASSIGNMENT="="
    SEMICOLON=";"
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    ARROW="->"
    PRAGMA_OPEN= "{-#"
    PRAGMA_CLOSE="#-}"

    LAMBDA="\\"
    VIRTUAL_LEFT_PAREN="VIRTUAL_LEFT_PAREN"
    VIRTUAL_RIGHT_PAREN="VIRTUAL_RIGHT_PAREN"
    VIRTUAL_SEMICOLON="VIRTUAL_SEMICOLON"
  ]

  psiPackage="org.jetbrains.agda.psi"
  psiImplPackage="org.jetbrains.agda.psi.impl"
}

root ::= declaration *



private recover ::= ! (VIRTUAL_RIGHT_PAREN | VIRTUAL_SEMICOLON)

fqName ::= id ('.' id) * {mixin = "org.jetbrains.agda.psi.AgdaReferenceElementImpl"}

name_declaration ::= id {mixin = "org.jetbrains.agda.psi.AgdaNamedElement"}

private ids ::= name_declaration+

// Pragmas

pragma_string ::= (id | "(" | ")" | "\\" | "->") *

pragma ::= PRAGMA_OPEN (build_in_pragma | compiled_type_pragma | compiled_pragma) PRAGMA_CLOSE {pin=1}

build_in_pragma ::= "BUILTIN" name_declaration name_declaration {pin=1}
compiled_type_pragma ::= "COMPILED_TYPE" name_declaration pragma_string {pin=1}
compiled_pragma ::= "COMPILED" name_declaration pragma_string {pin=1}


// Declarations

private recovering_declaration ::= module_declaration | module_import | open | infix | postulate | pragma | mutual | data_declaration | function_type_declaration | function_declaration | absurd_function {recoverUntil=recover}

private declaration ::= VIRTUAL_SEMICOLON? (record_declaration | record_field | record_constructor | recovering_declaration)

mutual ::= MUTUAL_KEYWORD VIRTUAL_LEFT_PAREN (declaration +) VIRTUAL_RIGHT_PAREN


module_arguments ::= expression *

record_declaration ::= "record" name_declaration typed_untyped_bindings ":" expression "where" VIRTUAL_LEFT_PAREN (declaration +) VIRTUAL_RIGHT_PAREN {pin=1}

type_signatures ::= type_signature (VIRTUAL_SEMICOLON type_signature)*

record_field ::= "field" ((VIRTUAL_LEFT_PAREN type_signatures VIRTUAL_RIGHT_PAREN) | type_signature) {pin=1}
record_constructor ::= "constructor" name_declaration {pin=1}

infix ::= ("infix" | "infixl" | "infixr") NUMBER name_declaration * {pin=1}

postulate_bindings ::= type_signature (VIRTUAL_SEMICOLON type_signature) *

postulate ::= "postulate" (VIRTUAL_LEFT_PAREN postulate_bindings VIRTUAL_RIGHT_PAREN)

module_declaration ::= 'module' fqName bindings "where" (VIRTUAL_LEFT_PAREN declaration+ VIRTUAL_RIGHT_PAREN)? {pin=1}

bindings ::= binding *


// Import and open

module_import ::= 'open' ? 'import' fqName module_arguments as_name? "public"? using_or_hiding? renaming?  {pin=2}
open ::= 'open' fqName module_arguments as_name? "public"? using_or_hiding? renaming? {pin=1}

binding ::= "{" ids (":" expression)? "}" | "(" ids (":" expression)? ")"

import_name ::= ("module"? fqName)

private import_names ::= import_name (";" import_name) *

as_name ::= "as" id

renaming ::= "renaming" "(" renamings ")"

private renamings ::= id "to" id (";" id "to" id)*

private using_keyword ::= 'using'

using_or_hiding ::= (using_keyword '(' import_names ')') | ('hiding' '(' import_names ')')



// Data declaration

data_declaration ::= "data" name_declaration bindings ":" expression "where" (VIRTUAL_LEFT_PAREN constructors VIRTUAL_RIGHT_PAREN) ? {pin=1}

constructors ::= type_signature (VIRTUAL_SEMICOLON type_signature) *

// Function declaration

function_type_declaration ::= name_declaration ":" expression {pin=2}

lhs ::= ("..." "|" expression) | expression

function_declaration ::= lhs "=" where_expression {pin = 2}

where_part ::= "where" ((VIRTUAL_LEFT_PAREN (declaration +) VIRTUAL_RIGHT_PAREN) | declaration)

where_expression ::= expression where_part?

absurd_function ::= expression

// Expressions

expression ::= let_expression | tele_arrow | lambda_expression | forall_expression | arrow_expression | application | atom_expr

private atom_expr ::= absurd_expression | parenthesis_expression | goal_expression | substitute_implisit | fqName | number_expression

absurd_expression ::= "(" ")" {extends=expression}

parenthesis_expression ::= "(" expression ")" {pin=1; extends=expression}

goal_expression ::= "{" "!!" "}" {extends=expression}


application ::= (atom_expr maybe_application) {extends=expression}

private maybe_application ::= application | atom_expr



number_expression ::= number {extends=expression}

substitute_implisit ::= "{" (name_declaration "=")?  expression "}" {extends=expression}

let_expression ::= "let" name_declaration "=" expression "in" expression

typed_untyped_binding ::= name_declaration+  | '{' ids '}' | ("{" type_signature "}") | ("(" type_signature ")")

private typed_untyped_bindings ::= (typed_untyped_binding)*

forall_expression ::= 'forall' typed_untyped_bindings ARROW expression {pin=1}

tele_arrow ::= telescope+ ARROW expression
telescope ::= implicit_telescope | explicit_telescope
implicit_telescope ::= "{" type_signature "}" {extends=telescope}
explicit_telescope ::= "(" type_signature ")" {extends=telescope}

type_signature ::= ids ":" expression

lambda_expression ::= ("\\" | "Î»") (("(" ids ":" expression ")") | ids) ARROW expression {extends=expression}

arrow_expression ::= maybe_application ARROW expression
